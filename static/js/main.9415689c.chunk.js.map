{"version":3,"sources":["Vibrate.js","LineWriter.js","App.js","useButtPlug.js","serviceWorker.js","index.js","../external \"Buttplug\""],"names":["Vibrate","on","device","level","useEffect","a","console","log","SendVibrateCmd","SendStopDeviceCmd","startVibrate","stopVibrate","scale","times","d3","clamp","domain","range","useSelfDismissing","timeout","useState","shown","setShown","setTimeout","bind","LineWriter","max","line","currentTimes","setCurrentTimes","text","updateText","isWrongShown","showWrong","isExpiredShown","showExpired","millis","mostRecent","setMostRecent","isExpired","setExpired","React","useRef","current","clearTimeout","Date","now","useTimesOutIn","resetExpired","style","color","height","backgroundColor","htmlFor","slice","length","type","onChange","e","startsWith","target","value","ClickedConnect","client","setClient","setDevice","isConnected","setIsConnected","newClient","ButtplugClient","addListener","connector","ButtplugEmbeddedClientConnector","Connect","StartScanning","start","useButtPlug","App","expressedIntentToConnect","setExpressedIntentToConnect","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports","Buttplug"],"mappings":"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","file":"static/js/main.9415689c.chunk.js","sourcesContent":["import { useEffect } from \"react\";\n\nfunction Vibrate({ on, device, level }) {\n  useEffect(() => {\n    async function startVibrate() {\n      console.log(\"startVibrate()\");\n      await device.SendVibrateCmd(level);\n      console.log(\"startVibrate() over\");\n    }\n\n    async function stopVibrate() {\n      console.log(\"stopVibrate()\");\n      await device.SendStopDeviceCmd();\n      console.log(\"stopVibrate() over\");\n    }\n\n    console.log(`vibrateEffect: ${on}, ${level}`);\n    if (on && level > 0) {\n      startVibrate();\n    } else {\n      stopVibrate();\n    }\n  }, [on, device, level]);\n\n  return null;\n}\n\nexport default Vibrate;\n","import React, { useState, useEffect } from \"react\";\n\nimport * as d3 from \"./d3-bundle\";\nimport Vibrate from \"./Vibrate\";\n\nconst scale = (times) =>\n  d3.scaleLinear().clamp(true).domain([0, times]).range([0, 1]);\n\nconst color = (max) =>\n  d3.scaleSequential(d3.interpolatePlasma).domain([0, max]);\n\nfunction useSelfDismissing(timeout) {\n  const [shown, setShown] = useState(false);\n  useEffect(() => {\n    if (shown) setTimeout(() => setShown(false), timeout);\n  }, [shown, timeout]);\n\n  return [shown, setShown.bind(true)];\n}\n\nfunction useTimesOutIn(millis) {\n  const [mostRecent, setMostRecent] = useState(null);\n  const [isExpired, setExpired] = useState(false);\n  const timeout = React.useRef(null);\n  useEffect(() => {\n    if (isExpired) return;\n\n    if (timeout.current) clearTimeout(timeout.current);\n    timeout.current = setTimeout(() => setExpired(true), millis);\n  }, [mostRecent, isExpired, millis]);\n\n  const resetExpired = () => {\n    setExpired(false);\n    setMostRecent(Date.now());\n  };\n  return [isExpired, resetExpired];\n}\n\nfunction LineWriter({ device, line, times }) {\n  const [currentTimes, setCurrentTimes] = useState(0);\n  const [text, updateText] = useState(\"\");\n  const [isWrongShown, showWrong] = useSelfDismissing(1000);\n  const [isExpiredShown, showExpired] = useSelfDismissing(1000);\n  const [isExpired, resetExpired] = useTimesOutIn(3000);\n\n  useEffect(() => {\n    if (!isExpired) return;\n    setCurrentTimes(0);\n    updateText(\"\");\n    showExpired(true);\n    resetExpired();\n  }, [isExpired, showExpired, resetExpired]);\n\n  function onChange(text) {\n    resetExpired();\n\n    if (line === text) {\n      setCurrentTimes(currentTimes + 1);\n      updateText(\"\");\n    } else if (line.startsWith(text)) {\n      updateText(text);\n    } else {\n      setCurrentTimes(0);\n      updateText(\"\");\n      showWrong(true);\n    }\n  }\n\n  return (\n    <div\n      style={{\n        color: \"#FFF\",\n        height: \"100vh\",\n        backgroundColor: color(times)(currentTimes),\n      }}\n    >\n      <section>\n        <label htmlFor=\"line\">\n          <strong>{text}</strong>\n          <i>{line.slice(text.length)}</i>\n        </label>\n      </section>\n      <section>\n        <input\n          type=\"text\"\n          onChange={(e) => onChange(e.target.value)}\n          value={text}\n        />\n      </section>\n      <section>\n        {currentTimes} / {times}\n      </section>\n      {isWrongShown && <h2>WRONG</h2>}\n      {isExpiredShown && <h2>EXPIRED</h2>}\n      <Vibrate device={device} level={scale(times)(currentTimes)} on />\n    </div>\n  );\n}\n\nexport default LineWriter;\n","import React, { useState } from \"react\";\nimport useButtPlug from \"./useButtPlug.js\";\n\nimport \"./App.css\";\nimport LineWriter from \"./LineWriter\";\n\nfunction App() {\n  const [expressedIntentToConnect, setExpressedIntentToConnect] = useState(\n    false\n  );\n\n  if (expressedIntentToConnect) return <ClickedConnect />;\n\n  return (\n    <button onClick={() => setExpressedIntentToConnect(true)}>Click Me</button>\n  );\n}\n\nfunction ClickedConnect() {\n  const { device, isConnected } = useButtPlug();\n  if (!isConnected) return <h1>Not Connected</h1>;\n\n  return <LineWriter device={device} line=\"I like cock a lot\" times={10} />;\n}\n\nexport default App;\n","import { useState, useEffect } from \"react\";\nimport { ButtplugClient, ButtplugEmbeddedClientConnector } from \"buttplug\";\n\nexport default function useButtPlug() {\n  const [client, setClient] = useState(null);\n  const [device, setDevice] = useState([]);\n  const [isConnected, setIsConnected] = useState(false);\n\n  useEffect(() => {\n    if (client) return;\n\n    const newClient = new ButtplugClient(\"Cammy\");\n    newClient.addListener(\"deviceadded\", (device) => {\n      setDevice(device);\n      setIsConnected(true);\n    });\n\n    setClient(newClient);\n  }, [client, device, isConnected]);\n\n  useEffect(() => {\n    if (!client || isConnected) return;\n\n    async function start() {\n      try {\n        const connector = new ButtplugEmbeddedClientConnector();\n        await client.Connect(connector);\n      } catch (e) {\n        console.log(e);\n        return;\n      }\n      await client.StartScanning();\n    }\n    start();\n  }, [client, isConnected]);\n\n  return { client, device, isConnected };\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = Buttplug;"],"sourceRoot":""}